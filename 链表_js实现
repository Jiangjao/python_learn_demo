function Node(element){
    this.element = element;
    this.next = null;
    this.previous = null;
}

function Llist(){
    this.insert = insert;
    this.head = new Node('head');
    this.find = find;
    //this.head.next = this.head; 这一句添加后，变成循环双向列表,看起来似乎很高级的样子
    this.remove = remove;
    this.display = display;
    this.findLast = findLast;
    this.dispReverse = dispReverse;
    // this.findPrevious = findPrevious;
}

function find(item){
    var currNode = this.head;
    try {
        while(currNode.element != item){
            currNode = currNode.next;
            }
        return currNode; 
    } catch (error) {  //type_error
        return 'The'+item + ' is not found'
    }
    
}

// function findPrevious(){
//     var curr = this.head;
//     while((preNode.next.element != currNode)){
//         preNode = preNode.next;
//     }
// }
function insert(newElement,item){
    var newNode = new Node(newElement);
    var current = this.find(item);
    //newNode.previous = current;
    newNode.next = current.next;
    current.next = newNode;
    //假设这里的改变是没有问题的,结果还是有问题的，比如 current.next.next = null 对吧
    //current.next.next.previous = newNode;
    newNode.previous=current;
}

function findLast(){
    var currNode = this.head;
    while(currNode.next != null){
        currNode = currNode.next;
    }
    return currNode;
}

function dispReverse(){
    var currNode = this.findLast();
    while(!(currNode.previous == null)){
        console.log(currNode.element);
        currNode = currNode.previous;
    }
}
function remove(item){
    // 找到之前的一个，即后面的一个
    // var preNode = this.head;
    var currNode = this.find(item);
    // if(item == 'head'){
    //     this.head = preNode.next;
    //     return ;
    // }
    // while((preNode.next.element != item)){
    //     preNode = preNode.next;
    // }
    // if(!(preNode.next == null)){
    //   preNode.next = preNode.next.next;      
    // }
    //双向链表 pre 和 next 比较好找，hah
    while(!(currNode.next == null)){
    var prevNode = currNode.pre;
    var nextNode = currNode.next;
    nextNode.pre = prevNode;
    prevNode.next = nextNode;
    //易漏去 currNode.next = null currNode.pre = null
    currNode.next = null;
    currNode.pre= null;
    }
}

function display(){
    var currNode = this.head;
    console.log(currNode)
    while(!(currNode.next == null)){  //如果这里的currNode.next = this.head... 则是循环列表的终止条件
        console.log(currNode.next.element);
        currNode = currNode.next;
    }
}

var cities = new Llist();
cities.insert('Conway','head');
cities.insert('Russellville','Conway');
cities.insert('Alma','Russellville');
// console.log(cities.find('head'))
 cities.remove('Alma')

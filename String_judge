def make_word_dict():
    """Reads the words in words.txt and returns a dictionary
    that contains the words as key"""
    d = dict()
    fin = open("words.txt")
    for line in fin:
        word = line.strip().lower()
        d[word] = word
        # print(line == "")

    # have to add single letter words to the word list;
    # also, the wmpty string is considered a word.
    for letter in ['a', 'i', '']:
        d[letter] = letter
    return d

# print(make_word_dict())

"""memo is a dictionary that maps from each word that is known
to be reducible to a list of its reducible children.  It starts
with the empty string."""

memo = {}
memo[''] = [""]

def is_reducible(word, word_dict):
    """If word is reducible, returns a list of its reducible children. Also adds an entry to the memo dictionary.
    A string is reducible if it has at least one child that is 
    reducible.  The empty string is also reducible.
    
    word: string
    # 使用meme来处理迭代
    word_dict: dictionary with words as keys
    """
    # if have already checked this word, return the answer
    if word in memo:
        return memo[word]

    # check each of the children and make a list of the reducible ones
    res = []
    for child in children(word, word_dict):
        # 画一下图，写一下迭代石子
        t = is_reducible(child, word_dict)
        print(t)
        # 多次判断该word是否符合条件，直至该元素
        # 终止条件是什么？？
        # 终止条件是单个字母如 i ,a ，'';或者已存在该元素
        if t:
            res.append(child)
    # memoize and return the result
    # 这里可以去重，妙啊
    memo[word] = res
    return res

def children(word, word_dict):
    """Returns a list of all words that can be formed by removing one letter.
    word: string"""
    # 就是返回一个可以满足条件的子list
    res = []
    for i in range(len(word)):
        child = word[:i] + word[i+1:]
        if child in word_dict:
            res.append(child)
    return res

def all_reducible(word_dict):
    """Checks all words in the word_dict; returns a list reducible ones.
    word_dict: dictionary with words as keys"""
    
    res = []
    for word in word_dict:
        t = is_reducible(word, word_dict)
        if t != [] :
            res.append(word)
    return res


def print_trail(word):
    """Prints the sequence of words that reduces this word to the empty string.
    If there is more than one choice, it chooses the first.
    word: string"""
    if len(word) == 0:
        return
    print(word),
    # t = is_reducible(word, word_dict)
    # print_trail(t[0])

def print_longest_words(word_dict):
    """print the longest 5 words"""
    words = all_reducible(word_dict)
    # use DSU to sort by word length
    t = []
    for word in words:
        t.append((len(word), word))
    t.sort(reverse = True)

    # print the longest 5 words
    for length, word in t[0:5]:
        if word == False:
            continue
        print_trail(word+"\n")
        # print()
# print(backet)


word_dict = make_word_dict()
print_longest_words(word_dict)
